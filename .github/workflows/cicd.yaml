name: cicd-homework
on:
  push:
    # branches:
    # - 'v[0-9].[0-9]'
    # - '!v[0-9].[0-9]-beta'
    # - '!v[0-9].[0-9].[0-9]'
    # - '!feature-*'

jobs:
  my_cicd_homework:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      id-token: write 
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build an image from Dockerfile
        run: |
            docker build -t docker.io/my-organization/my-app:${{ github.sha }} .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
              image-ref: 'docker.io/my-organization/my-app:${{ github.sha }}'
              format: 'table'
              exit-code: '1'
              ignore-unfixed: true
              vuln-type: 'os,library'
              severity: 'CRITICAL'
              output: 'trivy-results.txt'
        
      - name: Slack_Message_fail
        if: always() && (steps.scanner.outcome =='failure')
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL}}
          SLACK_COLOR: '#FF0000'
          SLACK_TITLE: Scan failed
          SLACK_MESSAGE: Failed trivy scan, see uploaded report
         
      - name: Upload_trivy_result
        if: always() && (steps.scanner.outcome =='failure')
        uses: MeilCli/slack-upload-file@v3
        with:
          slack_token: ${{ secrets.SLACK_token}}
          channel_id: ${{ secrets.SLACK_Channel_ID}}
          file_path: 'trivy-results.txt'
          initial_comment: 'post by fzm'
          # thread_ts: 'option'

      - name: Slack_Message_success
        
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL}}
          SLACK_COLOR: '#FF0000'
          SLACK_TITLE: Image built and signed
          SLACK_MESSAGE: <!DOCTYPE html>
                         <html >
          
                         <body>
          
                         <div class="info-card">
                         <p><strong>Name:</strong> Fang Zhimou</p>
                         <p><strong>Matriculation:</strong>A0285965H</p>
                         <p><strong>Email:</strong> <a href="mailto:e1221777@u.nus.edu">e1221777@u.nus.edu</a></p>
                         <p><strong>Git:</strong> <a href="" target="_blank"></a></p>
                         <p><strong>Image:</strong> <a href="" target="_blank"></a></p>
                         </div>
          
                         </body>
                         </html>
  
       
      - name: Set up QEMU
        id: set_up_QEMU
   
        uses: docker/setup-qemu-action@v3
     
      - name: Set up Docker Buildx
        id: set_up_Docker_Buildx
       
        uses: docker/setup-buildx-action@v3
     
      - name: Login to Docker Hub
        id: login_to_Docker_Hub
    
        uses: docker/login-action@v3
        with:
         username: ${{ secrets.Dockerhub_Username}}
         password: ${{ secrets.Docker_Token}}
 
      - name: Build and push
        id: build_and_push
      
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: fangzhimou/fortunes:latest
 
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.1.1
 
      - name: Check install!
        run: cosign version
     
      - name: Sign the images with GitHub OIDC Token
        env:
         DIGEST: ${{ steps.build_and_push.outputs.digest }}
         TAGS: fangzhimou/fortunes:latest
        run: cosign sign --yes "${TAGS}@${DIGEST}"